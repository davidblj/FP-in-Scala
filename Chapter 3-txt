
--- Defining functional data structures ---


A functional data structure is (not surprisingly) operated on using only pure func-
tions.

We are going to define a functional data structure, a list.


    package fpinscala.datastructures

    sealed trait List[+A]                                           // this is a data type, parameterized on type A
    
    case object Nil extends List[Nothing]                           // this is "a data constructor". and is how we represent
                                                                    // two possible forms of "list"

    case class Cons[+A](head: A, tail: List[A]) extends List[A]     // this is a short of "construct", and stands for
                                                                    // a non empty list and behaves like a linked singly list

    object List {                                                   // Companion object of "List". we put various convenience functions 
                                                                    // for creating or working with values of the data type. This is just
                                                                    // a convention. We can name it whatever we like, but naming it List
                                                                    // is the right and obvious thing to do.
        
        def sum(ints: List[Int]): Int = ints match {                // pattern matching of data types
            case Nil => 0
            case Cons(x,xs) => x + sum(xs)  
        }

        def product(ds: List[Double]): Double = ds match {
            case Nil => 1.0
            case Cons(0.0, _) => 0.0
            case Cons(x,xs) => x * product(xs)
        }

        def apply[A](as: A*): List[A] =                             // variadic function (multiple parameters). This apply functions 
            if (as.isEmpty) Nil                                     // returns our type structure Cons(head, subexpressions). This 
            else Cons(as.head, apply(as.tail: _*))                  // let us do something like: List(1,2,3,) equal to
                                                                    // Cons(1, Cons(2, Cons(3, Nil))). Its a common idiom in Scala, 
                                                                    // and is called the literal syntax, or list literal. 
    }


Just as functions can be polymorphic, data types can be as well, and by adding the type
parameter [+A] after sealed trait List and then using that A parameter inside of
the Cons data constructor, we declare the List DATA TYPE to be polymorphic in the type
of elements it contains, which means we can use this same definition for a list of Int
elements (denoted List[Int] ), Double elements (denoted List[Double] ), String
elements ( List[String] ), and so on.

This is how you use the previous construct 

    val ex1: List[Double] = Nil                             // note that Nil is our case object, not scala Nil
    val ex2: List[Int] = Cons(1, Nil)
    val ex3: List[String] = Cons("a", Cons("b", Nil))

The [+A], signals that A is a covariant: for all types X and Y, if X is a subtype of Y, then List[X] is a subtype of List[Y]


--- Pattern matching --- 


Examples of pattern matching using the previous data type.

    List(1,2,3) match { case _ => 42 }              // 42. "_" can be replaced with any variable name
    List(1,2,3) match { case Cons(h,_) => h }       // 1
    List(1,2,3) match { case Cons(_,t) => t }       // List(2,3)
    List(1,2,3) match { case Nil => 42 }            // match error


Cons(x1, Cons(x2, Nil)) and Cons(y1, Cons(y2, Cons(y3, _))) are valid patterns too. A pattern matches the target
if there exists an assignment of variables in the pattern to subexpressions of the target
that make it STRUCTURALLY equivalent to the target. The resulting expression for a matching
case will then have access to these variable assignments in its local scope.


    List(1,2,3) match { case Cons(x, Cons(2, Cons(3, Nil))) => x }      // structural equivalence of the target


--- Data sharing in functional data structures ---


When data is immutable, how do we write functions that, for example, add or remove
elements from a list? The answer is simple. When we add an element 1 to the front of
an existing list, say xs , we return a new list, in this case Cons(1,xs). Removing an 
element is even more performant, we just need the tail. The tail is just a reference to
the original list.

This is called data sharing. Sharing of immutable data often lets us implement functions 
more efficiently; we can always return immutable data structures without having to worry
about subsequent code modifying our data. There’s no need to pessimistically make copies to
avoid modification or corruption.

We say that functional data structures are persistent, meaning that existing references 
are never changed by operations on the data structure.

Take a look at the 3.4 and 3.5 exercises on data sharing. A more surprising example of data sharing is this function that adds 
all the elements of one list to the end of another:

    def append[A](a1: List[A], a2: List[A]): List[A] =
        a1 match {
            case Nil => a2
            case Cons(h,t) => Cons(h, append(t, a2))
    }

Note that this definition only copies values until the first list is exhausted, so its run-
time and memory usage are determined only by the length of a1 .


Exercises

    3.1 It should print out "3".
    
    3.2 Implement the function tail for removing the first element of a List

// inside the "list" object

def tail[A](list: List[A]) = list match {
      case Cons(_, xs) => xs
      case Nil => Nil
}

val myList = List(1,2,3)
List.tail(myList)


    3.3 implement the function setHead for replacing the first element
    of a List with a different value.   

// inside the "list" object

def setHead[A](list: List[A], head: A) = list match {
    case Cons(_, xs) => Cons(head, xs)
    case Nil => Nil
}

val myList = List(1,2,3)
List.setHead(myList, 5)


    3.4 Generalize tail to the function drop , which removes the first n elements from a list. Note that this function takes 
    time proportional only to the number of elements being dropped

// inside the list object

def drop[A](list: List[A], amount: Int): List[A] = {

    def loop(choppedList: List[A], iterator: Int): List[A] = {

        if (amount != iterator) {
            choppedList match {
                case Cons(_, xs) => loop(xs, iterator + 1)
                case Nil => Nil
            }
        } else {
            choppedList
        }
    }

    loop(list, 0)
}

val listToChop = List(1,2,3,4,5)
List.drop(listToChop, 4)
List.drop(listToChop, 5)  // limit reach
List.drop(listToChop, 6)  // post-limit


    3.5 Implement dropWhile , which removes elements from the List prefix as long as they
    match a predicate.   TO VERIFY

// inside the list object

def dropWhile[A](l: List[A], f: A => Boolean): List[A] = {

    l match {
        case Cons(x, xs) => if (f(x)) dropWhile(xs, f) else Cons(x, dropWhile(xs, f))
        case Nil => Nil
    }
}

val myList: List[Int] = Cons(1, Cons(2, Cons(3, Nil)))
List.dropWhile(myList, (n: Int) => { n % 2 == 0 })


    3.6 Implement a function, init , that returns a List
    consisting of all but the last element of a List . So, given List(1,2,3,4) , init will
    return List(1,2,3) . Why can’t this function be implemented in constant time like
    tail ?

